version: "3.8"
services:
  app-server:
    build:
      context: BackEnd-Peliculas
      dockerfile: Dockerfile
    depends_on:
      - mysqldb
    restart: on-failure
    env_file: ./.env
    ports:
      - $SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?autoReconnect=true&useSSL=false",
        "spring.datasource.username" : "$MYSQLDB_USER",
        "spring.datasource.password" : "$MYSQLDB_ROOT_PASSWORD",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
        "spring.jpa.hibernate.ddl-auto" : "update"
      }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true
    networks: 
      - backend
      - frontend


  app-client:
    build:
      context: FrontEnd-Peliculas
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=$CLIENT_API_BASE_URL
    ports:
        - $REACT_LOCAL_PORT:$REACT_DOCKER_PORT
 # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend  

  # Database Service (Mysql)
  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
    ports:
      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    volumes:
      - db:/var/lib/mysql
    networks:
      - backend  
  
# Volumes
volumes:
  db:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:  